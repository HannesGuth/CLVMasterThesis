big_grid[run, 28] = as.numeric(grid[as.numeric(index_list[1]), 3])
big_grid[run, 29] = as.numeric(grid[as.numeric(index_list[1]), 4])
big_grid[run, 30] = as.numeric(grid[as.numeric(index_list[1]), 5])
big_grid[run, 31] = as.numeric(grid[as.numeric(index_list[2]), 2])
big_grid[run, 32] = as.numeric(grid[as.numeric(index_list[2]), 3])
big_grid[run, 33] = as.numeric(grid[as.numeric(index_list[2]), 4])
big_grid[run, 34] = as.numeric(grid[as.numeric(index_list[2]), 5])
print(big_grid)
path1 = paste0(getwd(), "/Results/big_grid_", rob_list$name, ".RData")
path2 = paste0(getwd(), "/Results/big_grid_", rob_list$name, ".csv")
saveRDS(big_grid, file = path1)
write.csv(big_grid, file = path2)
rob_list$results = big_grid
}
}
}
dataset
rob_gift_list = list(data1 = gift1, data2 = gift2, s1 = c(20,60,160), s2 = c(40,60,120), pp = c(20,40,Inf), name = "gift")
rob_el_list = list(data1 = el1, data2 = el2, s1 = c(50,150), s2 = c(20,50,100), pp = c(20,40,Inf), name = "el")
robustness_list = list(gift = rob_gift_list, el = rob_el_list)
rob_data_list = c("gift", "el")
rob_data_list
dataset = "gift"
rob_list = robustness_list[rob_data_list[dataset]]
set.seed(1)
print(rob_list$name)
data1 = rob_list$data1
data2 = rob_list$data2
big_grid = data.table(expand.grid(rob_list$s1, rob_list$s2, rob_list$pp, rob_list$pp))
colnames(big_grid) = c("splitweek1", "splitweek2", "end1", "end2")
big_grid$BS_CET = 0
big_grid$EN_CET = 0
big_grid = data.table(expand.grid(rob_list$s1, rob_list$s2, rob_list$pp, rob_list$pp))
rob_list$s1
robustness_list[rob_data_list[dataset]]
rob_data_list
rob_gift_list[dataset]
dataset
rob_gift_list
rob_gift_list[[dataset]]
rob_gift_list$dataset
robustness_list[dataset]
rob_list = robustness_list[dataset]
set.seed(1)
print(rob_list$name)
data1 = rob_list$data1
rob_list
robustness_list
rob_gift_list = list(data1 = gift1, data2 = gift2, s1 = c(20,60,160), s2 = c(40,60,120), pp = c(20,40,Inf), name = "gift")
rob_gift_list
rob_el_list = list(data1 = el1, data2 = el2, s1 = c(50,150), s2 = c(20,50,100), pp = c(20,40,Inf), name = "el")
robustness_list = list(gift = rob_gift_list, el = rob_el_list)
rob_data_list = c("gift", "el")
rob_gift_list
robustness_list
robustness_list[dataset]
rob_list
robustness_list[[dataset]]
rob_list = robustness_list[[dataset]]
set.seed(1)
print(rob_list$name)
data1 = rob_list$data1
data2 = rob_list$data2
big_grid = data.table(expand.grid(rob_list$s1, rob_list$s2, rob_list$pp, rob_list$pp))
colnames(big_grid) = c("splitweek1", "splitweek2", "end1", "end2")
big_grid$BS_CET = 0
big_grid$EN_CET = 0
big_grid$BA_CET = 0
big_grid$QR_CET = 0
big_grid$CP_CET = 0
big_grid$CR_CET = 0
big_grid$EN_PTS = 0
big_grid$QR_PTS = 0
big_grid$CP_PTS = 0
big_grid$CR_PTS = 0
big_grid$CET_CP_quantile = 0
big_grid$PTS_CP_quantile = 0
big_grid$CET_CR_quantile = 0
big_grid$PTS_CR_quantile = 0
big_grid$CET_Lr = 0
big_grid$CET_La = 0
big_grid$CET_Ls = 0
big_grid$CET_Lb = 0
big_grid$CET_Ur = 0
big_grid$CET_Ua = 0
big_grid$CET_Us = 0
big_grid$CET_Ub = 0
big_grid$PTS_Lr = 0
big_grid$PTS_La = 0
big_grid$PTS_Ls = 0
big_grid$PTS_Lb = 0
big_grid$PTS_Ur = 0
big_grid$PTS_Ua = 0
big_grid$PTS_Us = 0
big_grid$PTS_Ub = 0
big_grid = big_grid[order(big_grid$splitweek2, big_grid$end2),]
rm(rob_gift_list)
rm(rob_el_list)
rm(robustness_list)
rm(rob_data_list)
dirname(rstudioapi::getSourceEditorContext()$path)
rob_list
rob_el_list
library(CLVTools)
rob_gift_list = list(data1 = gift1, data2 = gift2, s1 = c(20,60,160), s2 = c(40,60,120), pp = c(20,40,Inf), name = "gift")
library(CLVTools)
library(data.table)
library(compiler)
library(ggplot2)
library(profvis)
library(rockchalk)
library(doParallel)
library(geomtextpath)
library(dbscan)
library(BTYDplus)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rob_gift_list = list(data1 = gift1, data2 = gift2, s1 = c(20,60,160), s2 = c(40,60,120), pp = c(20,40,Inf), name = "gift")
rob_el_list = list(data1 = el1, data2 = el2, s1 = c(50,150), s2 = c(20,50,100), pp = c(20,40,Inf), name = "el")
robustness_list = list(gift = rob_gift_list, el = rob_el_list)
rob_data_list = c("gift", "el")
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(CLVTools)
library(data.table)
library(compiler)
library(ggplot2)
library(profvis)
library(rockchalk)
library(doParallel)
library(geomtextpath)
library(dbscan)
library(BTYDplus)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Load data
source(paste0(getwd(), "/Data preparation.r"))
rob_gift_list = list(data1 = gift1, data2 = gift2, s1 = c(20,60,160), s2 = c(40,60,120), pp = c(20,40,Inf), name = "gift")
rob_el_list = list(data1 = el1, data2 = el2, s1 = c(50,150), s2 = c(20,50,100), pp = c(20,40,Inf), name = "el")
robustness_list = list(gift = rob_gift_list, el = rob_el_list)
rob_data_list = c("gift", "el")
for (dataset in rob_data_list){
rob_list = robustness_list[[dataset]]
set.seed(1)
print(rob_list$name)
data1 = rob_list$data1
data2 = rob_list$data2
big_grid = data.table(expand.grid(rob_list$s1, rob_list$s2, rob_list$pp, rob_list$pp))
colnames(big_grid) = c("splitweek1", "splitweek2", "end1", "end2")
big_grid$BS_CET = 0
big_grid$EN_CET = 0
big_grid$BA_CET = 0
big_grid$QR_CET = 0
big_grid$CP_CET = 0
big_grid$CR_CET = 0
big_grid$EN_PTS = 0
big_grid$QR_PTS = 0
big_grid$CP_PTS = 0
big_grid$CR_PTS = 0
big_grid$CET_CP_quantile = 0
big_grid$PTS_CP_quantile = 0
big_grid$CET_CR_quantile = 0
big_grid$PTS_CR_quantile = 0
big_grid$CET_Lr = 0
big_grid$CET_La = 0
big_grid$CET_Ls = 0
big_grid$CET_Lb = 0
big_grid$CET_Ur = 0
big_grid$CET_Ua = 0
big_grid$CET_Us = 0
big_grid$CET_Ub = 0
big_grid$PTS_Lr = 0
big_grid$PTS_La = 0
big_grid$PTS_Ls = 0
big_grid$PTS_Lb = 0
big_grid$PTS_Ur = 0
big_grid$PTS_Ua = 0
big_grid$PTS_Us = 0
big_grid$PTS_Ub = 0
big_grid = big_grid[order(big_grid$splitweek2, big_grid$end2),]
for (run in 1:nrow(big_grid)){
print(run)
if ((big_grid[run,2] + big_grid[run,4]) != 160){
splitweek1 = as.numeric(big_grid[run,1])
splitweek2 = as.numeric(big_grid[run,2])
end1 = as.numeric(big_grid[run,3])
end2 = as.numeric(big_grid[run,4])
whole_period1 = ifelse(as.numeric(big_grid[run,3]) == Inf, TRUE, FALSE)
whole_period2 = ifelse(as.numeric(big_grid[run,4]) == Inf, TRUE, FALSE)
clv.data2 <- clvdata(data2,
date.format="ymd",
time.unit = "week",
estimation.split = splitweek2,
name.id = "Id",
name.date = "Date",
name.price = "Price")
# Estimate standard Pareto/NBD Model
est.data2 <- pnbd(clv.data = clv.data2, verbose = TRUE)
if (whole_period2){
results_general <- predict(est.data2, predict.spending = TRUE)
}else{
results_general <- predict(est.data2, predict.spending = TRUE, prediction.end = end2)
}
print(results_general)
if (run == 1 || ((run > 1) & (big_grid[run-1,2] != big_grid[run,2]) || (big_grid[run-1,4] != big_grid[run,4]))){
source(paste0(getwd(), "/BA.r"))
print("Bayesian approach done")
print(big_grid)
}
paste0(getwd(), "/QR.r")
source(paste0(getwd(), "/QR.r"))
print("Quantile regression done")
print(big_grid)
source(paste0(getwd(), "/CP periods.r"))
print("Conformal prediction one done")
print(big_grid)
source(paste0(getwd(), "/CR.r"))
print("Conformal prediction rep done")
big_grid[run, 7] = mean(intervals_BA$CET_covered, na.rm = TRUE)
big_grid[run, 8] = mean(intervals_QR_m$CET_covered, na.rm = TRUE)
big_grid[run, 9] = mean(intervals_CP_m$CET_covered, na.rm = TRUE)
big_grid[run, 10] = mean(intervals_CR_m$CET_covered, na.rm = TRUE)
#big_grid[run, 11] = mean(intervals_EN$PTS_covered, na.rm = TRUE)
big_grid[run, 12] = mean(intervals_QR_m$PTS_covered, na.rm = TRUE)
big_grid[run, 13] = mean(intervals_CP_m$PTS_covered, na.rm = TRUE)
big_grid[run, 14] = mean(intervals_CR_m$PTS_covered, na.rm = TRUE)
big_grid[run, 15] = quantile_CET_one
big_grid[run, 16] = quantile_PTS_one
big_grid[run, 17] = quantile_CET_rep
big_grid[run, 18] = quantile_PTS_rep
big_grid[run, 19] = as.numeric(grid[as.numeric(index_list[1]), 2])
big_grid[run, 20] = as.numeric(grid[as.numeric(index_list[1]), 3])
big_grid[run, 21] = as.numeric(grid[as.numeric(index_list[1]), 4])
big_grid[run, 22] = as.numeric(grid[as.numeric(index_list[1]), 5])
big_grid[run, 23] = as.numeric(grid[as.numeric(index_list[2]), 2])
big_grid[run, 24] = as.numeric(grid[as.numeric(index_list[2]), 3])
big_grid[run, 25] = as.numeric(grid[as.numeric(index_list[2]), 4])
big_grid[run, 26] = as.numeric(grid[as.numeric(index_list[2]), 5])
big_grid[run, 27] = as.numeric(grid[as.numeric(index_list[1]), 2])
big_grid[run, 28] = as.numeric(grid[as.numeric(index_list[1]), 3])
big_grid[run, 29] = as.numeric(grid[as.numeric(index_list[1]), 4])
big_grid[run, 30] = as.numeric(grid[as.numeric(index_list[1]), 5])
big_grid[run, 31] = as.numeric(grid[as.numeric(index_list[2]), 2])
big_grid[run, 32] = as.numeric(grid[as.numeric(index_list[2]), 3])
big_grid[run, 33] = as.numeric(grid[as.numeric(index_list[2]), 4])
big_grid[run, 34] = as.numeric(grid[as.numeric(index_list[2]), 5])
print(big_grid)
path1 = paste0(getwd(), "/Results/big_grid_", rob_list$name, ".RData")
path2 = paste0(getwd(), "/Results/big_grid_", rob_list$name, ".csv")
saveRDS(big_grid, file = path1)
write.csv(big_grid, file = path2)
rob_list$results = big_grid
}
}
}
big_grid
print("1")
# data("apparelTrans")
# tryCatch(
#   {
datecustomer = data2[,c(1,2)]
colnames(datecustomer) = c("cust", "date")
# Convert data into BTYD format
data2cbs = elog2cbs(datecustomer, T.cal = min(datecustomer$date) + 7*splitweek2)
params.pnbd = BTYD::pnbd.EstimateParameters(data2cbs[, c("x", "t.x", "T.cal")])
BTYD::pnbd.cbs.LL(params.pnbd, data2cbs[, c("x", "t.x", "T.cal")])
# Calculate CET
if (whole_period2){
data2cbs$xstar.pnbd = BTYD::pnbd.ConditionalExpectedTransactions(
params = params.pnbd, T.star = as.numeric(difftime(max(data2$Date),min(datecustomer$date) + 7*splitweek2, units = "weeks")),
x = data2cbs$x, t.x = data2cbs$t.x,
T.cal = data2cbs$T.cal)
}else{
data2cbs$xstar.pnbd = BTYD::pnbd.ConditionalExpectedTransactions(
params = params.pnbd, T.star = end2,
x = data2cbs$x, t.x = data2cbs$t.x,
T.cal = data2cbs$T.cal)
}
# Draw posterior parameter distribution and posterior predictive distribution
pnbd.draws = pnbd.mcmc.DrawParameters(data2cbs) # gives an error
pnbd.xstar.draws = mcmc.DrawFutureTransactions(data2cbs, pnbd.draws)
# Collect the data
intervals_BA = data.table("Id" = results_general$Id,
"CET_lower" = 0,
"CET_upper" = 0,
"CET_true" = results_general$actual.x,
"CET_prediction" = 0,
"CET_covered" = 0,
"PTS_lower" = NA,
"PTS_upper" = NA,
"PTS_true" = NA,
"PTS_prediction" = NA,
"PTS_covered" = NA
)
# Take the intervals of CET
for (i in 1:nrow(intervals_BA)){
intervals_BA[i,2] = quantile(pnbd.xstar.draws[,i], probs = alpha/2)
intervals_BA[i,3] = quantile(pnbd.xstar.draws[,i], probs = 1-(alpha/2))
}
i
pnbd.xstar.draws[,i]
alpha
# Set defaults
alpha = 0.1
library(CLVTools)
library(data.table)
library(compiler)
library(ggplot2)
library(profvis)
library(rockchalk)
library(doParallel)
library(geomtextpath)
library(dbscan)
library(BTYDplus)
# Set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Load data
# source(paste0(getwd(), "/Data preparation.r"))
rob_gift_list = list(data1 = gift1, data2 = gift2, s1 = c(20,60,160), s2 = c(40,60,120), pp = c(20,40,Inf), name = "gift")
rob_el_list = list(data1 = el1, data2 = el2, s1 = c(50,150), s2 = c(20,50,100), pp = c(20,40,Inf), name = "el")
robustness_list = list(gift = rob_gift_list, el = rob_el_list)
rob_data_list = c("gift", "el")
for (dataset in rob_data_list){
rob_list = robustness_list[[dataset]]
set.seed(1)
print(rob_list$name)
data1 = rob_list$data1
data2 = rob_list$data2
big_grid = data.table(expand.grid(rob_list$s1, rob_list$s2, rob_list$pp, rob_list$pp))
colnames(big_grid) = c("splitweek1", "splitweek2", "end1", "end2")
big_grid$BS_CET = 0
big_grid$EN_CET = 0
big_grid$BA_CET = 0
big_grid$QR_CET = 0
big_grid$CP_CET = 0
big_grid$CR_CET = 0
big_grid$EN_PTS = 0
big_grid$QR_PTS = 0
big_grid$CP_PTS = 0
big_grid$CR_PTS = 0
big_grid$CET_CP_quantile = 0
big_grid$PTS_CP_quantile = 0
big_grid$CET_CR_quantile = 0
big_grid$PTS_CR_quantile = 0
big_grid$CET_Lr = 0
big_grid$CET_La = 0
big_grid$CET_Ls = 0
big_grid$CET_Lb = 0
big_grid$CET_Ur = 0
big_grid$CET_Ua = 0
big_grid$CET_Us = 0
big_grid$CET_Ub = 0
big_grid$PTS_Lr = 0
big_grid$PTS_La = 0
big_grid$PTS_Ls = 0
big_grid$PTS_Lb = 0
big_grid$PTS_Ur = 0
big_grid$PTS_Ua = 0
big_grid$PTS_Us = 0
big_grid$PTS_Ub = 0
big_grid = big_grid[order(big_grid$splitweek2, big_grid$end2),]
for (run in 1:nrow(big_grid)){
print(run)
if ((big_grid[run,2] + big_grid[run,4]) != 160){
splitweek1 = as.numeric(big_grid[run,1])
splitweek2 = as.numeric(big_grid[run,2])
end1 = as.numeric(big_grid[run,3])
end2 = as.numeric(big_grid[run,4])
whole_period1 = ifelse(as.numeric(big_grid[run,3]) == Inf, TRUE, FALSE)
whole_period2 = ifelse(as.numeric(big_grid[run,4]) == Inf, TRUE, FALSE)
clv.data2 <- clvdata(data2,
date.format="ymd",
time.unit = "week",
estimation.split = splitweek2,
name.id = "Id",
name.date = "Date",
name.price = "Price")
# Estimate standard Pareto/NBD Model
est.data2 <- pnbd(clv.data = clv.data2, verbose = TRUE)
if (whole_period2){
results_general <- predict(est.data2, predict.spending = TRUE)
}else{
results_general <- predict(est.data2, predict.spending = TRUE, prediction.end = end2)
}
print(results_general)
if (run == 1 || ((run > 1) & (big_grid[run-1,2] != big_grid[run,2]) || (big_grid[run-1,4] != big_grid[run,4]))){
source(paste0(getwd(), "/BA.r"))
print("Bayesian approach done")
print(big_grid)
}
paste0(getwd(), "/QR.r")
source(paste0(getwd(), "/QR.r"))
print("Quantile regression done")
print(big_grid)
source(paste0(getwd(), "/CP periods.r"))
print("Conformal prediction one done")
print(big_grid)
source(paste0(getwd(), "/CR.r"))
print("Conformal prediction rep done")
big_grid[run, 7] = mean(intervals_BA$CET_covered, na.rm = TRUE)
big_grid[run, 8] = mean(intervals_QR_m$CET_covered, na.rm = TRUE)
big_grid[run, 9] = mean(intervals_CP_m$CET_covered, na.rm = TRUE)
big_grid[run, 10] = mean(intervals_CR_m$CET_covered, na.rm = TRUE)
#big_grid[run, 11] = mean(intervals_EN$PTS_covered, na.rm = TRUE)
big_grid[run, 12] = mean(intervals_QR_m$PTS_covered, na.rm = TRUE)
big_grid[run, 13] = mean(intervals_CP_m$PTS_covered, na.rm = TRUE)
big_grid[run, 14] = mean(intervals_CR_m$PTS_covered, na.rm = TRUE)
big_grid[run, 15] = quantile_CET_one
big_grid[run, 16] = quantile_PTS_one
big_grid[run, 17] = quantile_CET_rep
big_grid[run, 18] = quantile_PTS_rep
big_grid[run, 19] = as.numeric(grid[as.numeric(index_list[1]), 2])
big_grid[run, 20] = as.numeric(grid[as.numeric(index_list[1]), 3])
big_grid[run, 21] = as.numeric(grid[as.numeric(index_list[1]), 4])
big_grid[run, 22] = as.numeric(grid[as.numeric(index_list[1]), 5])
big_grid[run, 23] = as.numeric(grid[as.numeric(index_list[2]), 2])
big_grid[run, 24] = as.numeric(grid[as.numeric(index_list[2]), 3])
big_grid[run, 25] = as.numeric(grid[as.numeric(index_list[2]), 4])
big_grid[run, 26] = as.numeric(grid[as.numeric(index_list[2]), 5])
big_grid[run, 27] = as.numeric(grid[as.numeric(index_list[1]), 2])
big_grid[run, 28] = as.numeric(grid[as.numeric(index_list[1]), 3])
big_grid[run, 29] = as.numeric(grid[as.numeric(index_list[1]), 4])
big_grid[run, 30] = as.numeric(grid[as.numeric(index_list[1]), 5])
big_grid[run, 31] = as.numeric(grid[as.numeric(index_list[2]), 2])
big_grid[run, 32] = as.numeric(grid[as.numeric(index_list[2]), 3])
big_grid[run, 33] = as.numeric(grid[as.numeric(index_list[2]), 4])
big_grid[run, 34] = as.numeric(grid[as.numeric(index_list[2]), 5])
print(big_grid)
path1 = paste0(getwd(), "/Results/big_grid_", rob_list$name, ".RData")
path2 = paste0(getwd(), "/Results/big_grid_", rob_list$name, ".csv")
saveRDS(big_grid, file = path1)
write.csv(big_grid, file = path2)
rob_list$results = big_grid
}
}
}
big_grid_gift = readRDS(paste0(getwd(), "/Results/big_grid_gift", ".RData"))
big_grid_el = readRDS(paste0(getwd(), "/Results/big_grid_el", ".RData"))
big_grid_gift = big_grid_gift[CP_CET != 0]
ggplot(big_grid_gift) +
# geom_density(aes(BS_CET, color = "BS")) +
# geom_density(aes(EN_CET, color = "EN")) +
geom_density(aes(BA_CET, color = "BA")) +
geom_density(aes(QR_CET, color = "QR")) +
geom_density(aes(CP_CET, color = "CP")) +
geom_density(aes(CR_CET, color = "CR")) +
scale_color_manual(values = c("BA" = "green", "CP" = "purple", "CR" = "orange", "QR" = "pink")) +
xlim(0,1)
big_grid_gift_long = reshape2::melt(big_grid_gift[,7:10])
big_grid_el_long = reshape2::melt(big_grid_el[,7:10])
big_grid_gift_long$Dataset = "gift"
big_grid_el_long$Dataset = "el"
combined_long = rbind(big_grid_gift_long, big_grid_el_long)
title = "Performance over different periods (all values)"
ggplot(combined_long, aes(x = variable, y = value*100, fill = Dataset)) +
geom_boxplot(position = position_dodge(width = 0.75)) +
labs(x = "Methods", y = "Coverage in %", title = title) +
scale_fill_manual(values = c("gift" = "blue", "el" = "red")) +
scale_x_discrete(labels = c("BA", "QR", "CP", "CR")) +
theme(axis.text.x = element_text(size=rel(1.7)),
axis.text.y = element_text(size=rel(1.7)),
axis.title.x = element_text(size=rel(1.7)),
axis.title.y = element_text(size=rel(1.7)),
plot.title = element_text(size=rel(1.7)),
#legend.title = element_blank(),
legend.position="none",
axis.text=element_text(size=12),
axis.title=element_text(size=12),
panel.background = element_rect(fill = "white", colour = "black"),
panel.grid.major = element_line(colour = "white", size = 0.5))
ggsave(filename = file.path(paste0(getwd(), "/Plots/", title, ".png")), width = 7, height = 3.5)
# Without splitweek1 = 20
big_grid_gift = big_grid_gift[splitweek1 != 20,]
big_grid_gift_long = reshape2::melt(big_grid_gift[,7:10])
big_grid_el_long = reshape2::melt(big_grid_el[,7:10])
big_grid_gift_long$Dataset = "gift"
big_grid_el_long$Dataset = "el"
combined_long = rbind(big_grid_gift_long, big_grid_el_long)
title = "Performance over different periods (without low l1-values for gift)"
ggplot(combined_long, aes(x = variable, y = value*100, fill = Dataset)) +
geom_boxplot(position = position_dodge(width = 0.75)) +
labs(x = "Methods", y = "Coverage in %", title = title) +
scale_fill_manual(values = c("gift" = "blue", "el" = "red")) +
scale_x_discrete(labels = c("BA", "QR", "CP", "CR")) +
theme(axis.text.x = element_text(size=rel(1.7)),
axis.text.y = element_text(size=rel(1.7)),
axis.title.x = element_text(size=rel(1.7)),
axis.title.y = element_text(size=rel(1.7)),
plot.title = element_text(size=rel(1.7)),
#legend.title = element_blank(),
legend.position="none",
axis.text=element_text(size=12),
axis.title=element_text(size=12),
panel.background = element_rect(fill = "white", colour = "black"),
panel.grid.major = element_line(colour = "white", size = 0.5))
ggsave(filename = file.path(paste0(getwd(), "/Plots/", title, ".png")), width = 7, height = 3.5)
# Relation between period sum and coverage
psc_gift_data = data.table("sum" = rowSums(big_grid_gift[,1:2]),
"BA" = big_grid_gift$BA_CET,
"QR" = big_grid_gift$QR_CET,
"CP" = big_grid_gift$CP_CET,
"CR" = big_grid_gift$CR_CET)
psc_el_data = data.table("sum" = rowSums(big_grid_el[,1:2]),
"BA" = big_grid_el$BA_CET,
"QR" = big_grid_el$QR_CET,
"CP" = big_grid_el$CP_CET,
"CR" = big_grid_el$CR_CET)
method_colors_all = c("BS" = "black", "EN" = "grey", "BA" = "green", "CP" = "red", "CR" = "yellow", "QR" = "blue")
method_colors_sel = c("EN" = "grey", "BA" = "green", "CP" = "red", "CR" = "yellow", "QR" = "blue")
plot_coverage_data = merge(x = coverage_table[, c("Method", "PICP", "PIARW", "Data")], y = ranking_table[, c("Method", "Rank_PICP")], by = "Method")
plot_data_CET
gc()
